{"version":3,"file":"Scheduler-prod.js","sources":["../../packages/scheduler/src/forks/SchedulerFeatureFlags.www.js","../../packages/scheduler/src/SchedulerMinHeap.js","../../packages/scheduler/src/SchedulerPriorities.js","../../packages/scheduler/src/SchedulerProfiling.js","../../packages/scheduler/src/forks/Scheduler.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// $FlowFixMe[cannot-resolve-module]\nconst dynamicFeatureFlags = require('SchedulerFeatureFlags');\n\nexport const {enableRequestPaint} = dynamicFeatureFlags;\n\nexport const enableProfiling = __DEV__;\nexport const frameYieldMs = 10;\n\nexport const userBlockingPriorityTimeout = 250;\nexport const normalPriorityTimeout = 5000;\nexport const lowPriorityTimeout = 10000;\n\nexport const enableAlwaysYieldScheduler = false;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\ntype Heap<T: Node> = Array<T>;\ntype Node = {\n  id: number,\n  sortIndex: number,\n  ...\n};\n\nexport function push<T: Node>(heap: Heap<T>, node: T): void {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek<T: Node>(heap: Heap<T>): T | null {\n  return heap.length === 0 ? null : heap[0];\n}\n\nexport function pop<T: Node>(heap: Heap<T>): T | null {\n  if (heap.length === 0) {\n    return null;\n  }\n  const first = heap[0];\n  const last = heap.pop();\n  if (last !== first) {\n    // $FlowFixMe[incompatible-type]\n    heap[0] = last;\n    // $FlowFixMe[incompatible-call]\n    siftDown(heap, last, 0);\n  }\n  return first;\n}\n\nfunction siftUp<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  while (index > 0) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a: Node, b: Node) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\n\n// TODO: Use symbols?\nexport const NoPriority = 0;\nexport const ImmediatePriority = 1;\nexport const UserBlockingPriority = 2;\nexport const NormalPriority = 3;\nexport const LowPriority = 4;\nexport const IdlePriority = 5;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {PriorityLevel} from './SchedulerPriorities';\nimport {enableProfiling} from './SchedulerFeatureFlags';\n\nlet runIdCounter: number = 0;\nlet mainThreadIdCounter: number = 0;\n\n// Bytes per element is 4\nconst INITIAL_EVENT_LOG_SIZE = 131072;\nconst MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nlet eventLogSize = 0;\nlet eventLogBuffer = null;\nlet eventLog = null;\nlet eventLogIndex = 0;\n\nconst TaskStartEvent = 1;\nconst TaskCompleteEvent = 2;\nconst TaskErrorEvent = 3;\nconst TaskCancelEvent = 4;\nconst TaskRunEvent = 5;\nconst TaskYieldEvent = 6;\nconst SchedulerSuspendEvent = 7;\nconst SchedulerResumeEvent = 8;\n\nfunction logEvent(entries: Array<number | PriorityLevel>) {\n  if (eventLog !== null) {\n    const offset = eventLogIndex;\n    eventLogIndex += entries.length;\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\n          \"Scheduler Profiling: Event log exceeded maximum size. Don't \" +\n            'forget to call `stopLoggingProfilingEvents()`.',\n        );\n        stopLoggingProfilingEvents();\n        return;\n      }\n      const newEventLog = new Int32Array(eventLogSize * 4);\n      // $FlowFixMe[incompatible-call] found when upgrading Flow\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n    eventLog.set(entries, offset);\n  }\n}\n\nexport function startLoggingProfilingEvents(): void {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\n\nexport function stopLoggingProfilingEvents(): ArrayBuffer | null {\n  const buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\n\nexport function markTaskStart(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\n\nexport function markTaskCompleted(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskCanceled(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskErrored(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskRun(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    runIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markTaskYield(task: {id: number, ...}, ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerSuspended(ms: number) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerUnsuspended(ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-var */\n\nimport type {PriorityLevel} from '../SchedulerPriorities';\n\nimport {\n  enableProfiling,\n  frameYieldMs,\n  userBlockingPriorityTimeout,\n  lowPriorityTimeout,\n  normalPriorityTimeout,\n  enableRequestPaint,\n  enableAlwaysYieldScheduler,\n} from '../SchedulerFeatureFlags';\n\nimport {push, pop, peek} from '../SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from '../SchedulerProfiling';\n\nexport type Callback = boolean => ?Callback;\n\nexport opaque type Task = {\n  id: number,\n  callback: Callback | null,\n  priorityLevel: PriorityLevel,\n  startTime: number,\n  expirationTime: number,\n  sortIndex: number,\n  isQueued?: boolean,\n};\n\nlet getCurrentTime: () => number | DOMHighResTimeStamp;\nconst hasPerformanceNow =\n  // $FlowFixMe[method-unbinding]\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n  getCurrentTime = () => localDate.now() - initialTime;\n}\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Tasks are stored on a min heap\nvar taskQueue: Array<Task> = [];\nvar timerQueue: Array<Task> = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrance.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nvar needsPaint = false;\n\n// Capture local references to native APIs, in case a polyfill overrides them.\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nconst localClearTimeout =\n  typeof clearTimeout === 'function' ? clearTimeout : null;\nconst localSetImmediate =\n  typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nfunction advanceTimers(currentTime: number) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime: number) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback();\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(initialTime: number) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskErrored(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(initialTime: number) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (currentTask !== null) {\n    if (!enableAlwaysYieldScheduler) {\n      if (currentTask.expirationTime > currentTime && shouldYieldToHost()) {\n        // This currentTask hasn't expired, and we've reached the deadline.\n        break;\n      }\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentPriorityLevel = currentTask.priorityLevel;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n        advanceTimers(currentTime);\n        return true;\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n    if (enableAlwaysYieldScheduler) {\n      if (currentTask === null || currentTask.expirationTime > currentTime) {\n        // This currentTask hasn't expired we yield to the browser task.\n        break;\n      }\n    }\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority<T>(\n  priorityLevel: PriorityLevel,\n  eventHandler: () => T,\n): T {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next<T>(eventHandler: () => T): T {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback<T: (...Array<mixed>) => mixed>(callback: T): T {\n  var parentPriorityLevel = currentPriorityLevel;\n  // $FlowFixMe[incompatible-return]\n  // $FlowFixMe[missing-this-annot]\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: Callback,\n  options?: {delay: number},\n): Task {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      // Times out immediately\n      timeout = -1;\n      break;\n    case UserBlockingPriority:\n      // Eventually times out\n      timeout = userBlockingPriorityTimeout;\n      break;\n    case IdlePriority:\n      // Never times out\n      timeout = maxSigned31BitInt;\n      break;\n    case LowPriority:\n      // Eventually times out\n      timeout = lowPriorityTimeout;\n      break;\n    case NormalPriority:\n    default:\n      // Eventually times out\n      timeout = normalPriorityTimeout;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask: Task = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback();\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_cancelCallback(task: Task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel(): PriorityLevel {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet taskTimeoutID: TimeoutID = (-1: any);\n\n// Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\nlet frameInterval = frameYieldMs;\nlet startTime = -1;\n\nfunction shouldYieldToHost(): boolean {\n  if (!enableAlwaysYieldScheduler && enableRequestPaint && needsPaint) {\n    // Yield now.\n    return true;\n  }\n  const timeElapsed = getCurrentTime() - startTime;\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  }\n  // Yield now.\n  return true;\n}\n\nfunction requestPaint() {\n  if (enableRequestPaint) {\n    needsPaint = true;\n  }\n}\n\nfunction forceFrameRate(fps: number) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error'](\n      'forceFrameRate takes a positive int between 0 and 125, ' +\n        'forcing frame rates higher than 125 fps is not supported',\n    );\n    return;\n  }\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nconst performWorkUntilDeadline = () => {\n  if (enableRequestPaint) {\n    needsPaint = false;\n  }\n  if (isMessageLoopRunning) {\n    const currentTime = getCurrentTime();\n    // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n    startTime = currentTime;\n\n    // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `flushWork` errors, then `hasMoreWork` will\n    // remain true, and we'll continue the work loop.\n    let hasMoreWork = true;\n    try {\n      hasMoreWork = flushWork(currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n      }\n    }\n  }\n};\n\nlet schedulePerformWorkUntilDeadline;\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  const channel = new MessageChannel();\n  const port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    // $FlowFixMe[not-a-function] nullable value\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback() {\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(\n  callback: (currentTime: number) => void,\n  ms: number,\n) {\n  // $FlowFixMe[not-a-function] nullable value\n  taskTimeoutID = localSetTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  // $FlowFixMe[not-a-function] nullable value\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = ((-1: any): TimeoutID);\n}\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  requestPaint as unstable_requestPaint,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n};\n\nexport const unstable_Profiling: {\n  startLoggingProfilingEvents(): void,\n  stopLoggingProfilingEvents(): ArrayBuffer | null,\n} | null = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n"],"names":["dynamicFeatureFlags","require","enableRequestPaint","enableProfiling","__DEV__","frameYieldMs","userBlockingPriorityTimeout","normalPriorityTimeout","lowPriorityTimeout","push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","getCurrentTime","hasPerformanceNow","performance","now","localPerformance","localDate","Date","initialTime","maxSigned31BitInt","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","needsPaint","localSetTimeout","setTimeout","localClearTimeout","clearTimeout","localSetImmediate","setImmediate","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","firstTimer","requestHostTimeout","flushWork","cancelHostTimeout","previousPriorityLevel","workLoop","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_cancelCallback","unstable_getCurrentPriorityLevel","isMessageLoopRunning","taskTimeoutID","frameInterval","timeElapsed","requestPaint","forceFrameRate","fps","console","Math","floor","performWorkUntilDeadline","hasMoreWork","schedulePerformWorkUntilDeadline","MessageChannel","channel","port","port2","port1","onmessage","postMessage","unstable_Profiling"],"mappings":"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"}