{"version":3,"file":"JSXDEVRuntime-profiling.js","sources":["../../packages/shared/forks/ReactFeatureFlags.www.js","../../packages/shared/ReactSymbols.js","../../packages/react/src/jsx/ReactJSX.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.www';\nimport typeof * as DynamicFeatureFlags from './ReactFeatureFlags.www-dynamic';\n\n// Re-export dynamic flags from the www version.\nconst dynamicFeatureFlags: DynamicFeatureFlags = require('ReactFeatureFlags');\n\nexport const {\n  alwaysThrottleRetries,\n  disableDefaultPropsExceptForClasses,\n  disableLegacyContextForFunctionComponents,\n  disableSchedulerTimeoutInWorkLoop,\n  enableDO_NOT_USE_disableStrictPassiveEffect,\n  enableHiddenSubtreeInsertionEffectCleanup,\n  enableInfiniteRenderLoopDetection,\n  enableNoCloningMemoCache,\n  enableObjectFiber,\n  enableRenderableContext,\n  enableRetryLaneExpiration,\n  enableSiblingPrerendering,\n  enableTransitionTracing,\n  enableTrustedTypesIntegration,\n  enableUseEffectCRUDOverload,\n  favorSafetyOverHydrationPerf,\n  renameElementSymbol,\n  retryLaneExpirationMs,\n  syncLaneExpirationMs,\n  transitionLaneExpirationMs,\n  enableFastAddPropertiesInDiffing,\n  enableViewTransition,\n  enableComponentPerformanceTrack,\n  enableScrollEndPolyfill,\n  enableFragmentRefs,\n  ownerStackLimit,\n} = dynamicFeatureFlags;\n\n// On WWW, __EXPERIMENTAL__ is used for a new modern build.\n// It's not used anywhere in production yet.\n\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableUpdaterTracking = __PROFILE__;\nexport const enableFabricCompleteRootInCommitPhase = false;\n\nexport const enableSuspenseAvoidThisFallback = true;\n\nexport const enableCPUSuspense = true;\nexport const enableUseEffectEventHook = true;\nexport const enableMoveBefore = false;\nexport const disableInputAttributeSyncing = false;\nexport const enableLegacyFBSupport = true;\n\nexport const enableYieldingBeforePassive = false;\n\nexport const enableThrottledScheduling = false;\n\nexport const enableHydrationLaneScheduling = true;\n\n// Logs additional User Timing API marks for use with an experimental profiling tool.\nexport const enableSchedulingProfiler: boolean =\n  __PROFILE__ && dynamicFeatureFlags.enableSchedulingProfiler;\n\nexport const disableLegacyContext = __EXPERIMENTAL__;\n\nexport const enableLegacyCache = true;\n\nexport const enableAsyncIterableChildren = false;\n\nexport const enableTaint = false;\n\nexport const enablePostpone = false;\n\nexport const enableHalt = false;\n\n// TODO: www currently relies on this feature. It's disabled in open source.\n// Need to remove it.\nexport const disableCommentsAsDOMContainers = false;\n\nexport const enableCreateEventHandleAPI = true;\n\nexport const enableScopeAPI = true;\n\nexport const enableSuspenseCallback = true;\n\nexport const enableLegacyHidden = true;\n\nexport const disableTextareaChildren = __EXPERIMENTAL__;\n\nexport const enableFizzExternalRuntime = true;\n\nexport const passChildrenWhenCloningPersistedNodes = false;\n\nexport const enablePersistedModeClonedFlag = false;\n\nexport const enableAsyncDebugInfo = false;\nexport const disableClientCache = true;\n\nexport const enableReactTestRendererWarning = false;\n\nexport const disableLegacyMode = true;\n\nexport const enableShallowPropDiffing = false;\n\nexport const enableLazyPublicInstanceInFabric = false;\n\nexport const enableSwipeTransition = false;\n\n// Flow magic to verify the exports of this file match the original version.\n((((null: any): ExportsType): FeatureFlagsType): ExportsType);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {renameElementSymbol} from 'shared/ReactFeatureFlags';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_LEGACY_ELEMENT_TYPE: symbol = Symbol.for('react.element');\nexport const REACT_ELEMENT_TYPE: symbol = renameElementSymbol\n  ? Symbol.for('react.transitional.element')\n  : REACT_LEGACY_ELEMENT_TYPE;\nexport const REACT_PORTAL_TYPE: symbol = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE: symbol = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE: symbol = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE: symbol = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE: symbol = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\nexport const REACT_CONSUMER_TYPE: symbol = Symbol.for('react.consumer');\nexport const REACT_CONTEXT_TYPE: symbol = Symbol.for('react.context');\nexport const REACT_FORWARD_REF_TYPE: symbol = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE: symbol = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE: symbol = Symbol.for(\n  'react.suspense_list',\n);\nexport const REACT_MEMO_TYPE: symbol = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE: symbol = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE: symbol = Symbol.for('react.scope');\nexport const REACT_ACTIVITY_TYPE: symbol = Symbol.for('react.activity');\nexport const REACT_LEGACY_HIDDEN_TYPE: symbol = Symbol.for(\n  'react.legacy_hidden',\n);\nexport const REACT_TRACING_MARKER_TYPE: symbol = Symbol.for(\n  'react.tracing_marker',\n);\n\nexport const REACT_MEMO_CACHE_SENTINEL: symbol = Symbol.for(\n  'react.memo_cache_sentinel',\n);\n\nexport const REACT_POSTPONE_TYPE: symbol = Symbol.for('react.postpone');\n\nexport const REACT_VIEW_TRANSITION_TYPE: symbol = Symbol.for(\n  'react.view_transition',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<any> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n\nexport const ASYNC_ITERATOR = Symbol.asyncIterator;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport {REACT_FRAGMENT_TYPE} from 'shared/ReactSymbols';\nimport {\n  jsxProd,\n  jsxProdSignatureRunningInDevWithDynamicChildren,\n  jsxProdSignatureRunningInDevWithStaticChildren,\n  jsxDEV as _jsxDEV,\n} from './ReactJSXElement';\n\nconst jsx: any = __DEV__\n  ? jsxProdSignatureRunningInDevWithDynamicChildren\n  : jsxProd;\n// we may want to special case jsxs internally to take advantage of static children.\n// for now we can ship identical prod functions\nconst jsxs: any = __DEV__\n  ? jsxProdSignatureRunningInDevWithStaticChildren\n  : jsxProd;\n\nconst jsxDEV: any = __DEV__ ? _jsxDEV : undefined;\n\nexport {REACT_FRAGMENT_TYPE as Fragment, jsx, jsxs, jsxDEV};\n"],"names":["require","REACT_FRAGMENT_TYPE","Symbol","for","jsxDEV","undefined"],"mappings":";;AAaA;AACiDA,OAAO,CAAC,mBAAmB;;ACOrE,MAAMC,mBAAmB,GAAWC,MAAM,CAACC,GAAG,CAAC,gBAAgB;;ACItE,MAAMC,MAAM,GAA4BC;;;;;"}