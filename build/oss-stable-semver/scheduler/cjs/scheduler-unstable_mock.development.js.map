{"version":3,"file":"scheduler-unstable_mock.development.js","sources":["../../../../packages/scheduler/src/SchedulerFeatureFlags.js","../../../../packages/scheduler/src/SchedulerMinHeap.js","../../../../packages/scheduler/src/SchedulerPriorities.js","../../../../packages/scheduler/src/SchedulerProfiling.js","../../../../packages/scheduler/src/forks/SchedulerMock.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport const enableProfiling = false;\nexport const frameYieldMs = 5;\n\nexport const userBlockingPriorityTimeout = 250;\nexport const normalPriorityTimeout = 5000;\nexport const lowPriorityTimeout = 10000;\nexport const enableRequestPaint = true;\n\nexport const enableAlwaysYieldScheduler = __EXPERIMENTAL__;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\ntype Heap<T: Node> = Array<T>;\ntype Node = {\n  id: number,\n  sortIndex: number,\n  ...\n};\n\nexport function push<T: Node>(heap: Heap<T>, node: T): void {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek<T: Node>(heap: Heap<T>): T | null {\n  return heap.length === 0 ? null : heap[0];\n}\n\nexport function pop<T: Node>(heap: Heap<T>): T | null {\n  if (heap.length === 0) {\n    return null;\n  }\n  const first = heap[0];\n  const last = heap.pop();\n  if (last !== first) {\n    // $FlowFixMe[incompatible-type]\n    heap[0] = last;\n    // $FlowFixMe[incompatible-call]\n    siftDown(heap, last, 0);\n  }\n  return first;\n}\n\nfunction siftUp<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  while (index > 0) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown<T: Node>(heap: Heap<T>, node: T, i: number): void {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a: Node, b: Node) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\nexport type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\n\n// TODO: Use symbols?\nexport const NoPriority = 0;\nexport const ImmediatePriority = 1;\nexport const UserBlockingPriority = 2;\nexport const NormalPriority = 3;\nexport const LowPriority = 4;\nexport const IdlePriority = 5;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {PriorityLevel} from './SchedulerPriorities';\nimport {enableProfiling} from './SchedulerFeatureFlags';\n\nlet runIdCounter: number = 0;\nlet mainThreadIdCounter: number = 0;\n\n// Bytes per element is 4\nconst INITIAL_EVENT_LOG_SIZE = 131072;\nconst MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nlet eventLogSize = 0;\nlet eventLogBuffer = null;\nlet eventLog = null;\nlet eventLogIndex = 0;\n\nconst TaskStartEvent = 1;\nconst TaskCompleteEvent = 2;\nconst TaskErrorEvent = 3;\nconst TaskCancelEvent = 4;\nconst TaskRunEvent = 5;\nconst TaskYieldEvent = 6;\nconst SchedulerSuspendEvent = 7;\nconst SchedulerResumeEvent = 8;\n\nfunction logEvent(entries: Array<number | PriorityLevel>) {\n  if (eventLog !== null) {\n    const offset = eventLogIndex;\n    eventLogIndex += entries.length;\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\n          \"Scheduler Profiling: Event log exceeded maximum size. Don't \" +\n            'forget to call `stopLoggingProfilingEvents()`.',\n        );\n        stopLoggingProfilingEvents();\n        return;\n      }\n      const newEventLog = new Int32Array(eventLogSize * 4);\n      // $FlowFixMe[incompatible-call] found when upgrading Flow\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n    eventLog.set(entries, offset);\n  }\n}\n\nexport function startLoggingProfilingEvents(): void {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\n\nexport function stopLoggingProfilingEvents(): ArrayBuffer | null {\n  const buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\n\nexport function markTaskStart(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\n\nexport function markTaskCompleted(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskCanceled(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskErrored(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskRun(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    runIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markTaskYield(task: {id: number, ...}, ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerSuspended(ms: number) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerUnsuspended(ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable no-var */\n/* eslint-disable react-internal/prod-error-codes */\n\nimport type {PriorityLevel} from '../SchedulerPriorities';\n\nimport {enableProfiling} from '../SchedulerFeatureFlags';\nimport {push, pop, peek} from '../SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from '../SchedulerProfiling';\n\ntype Callback = boolean => ?Callback;\n\ntype Task = {\n  id: number,\n  callback: Callback | null,\n  priorityLevel: PriorityLevel,\n  startTime: number,\n  expirationTime: number,\n  sortIndex: number,\n  isQueued?: boolean,\n};\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nvar taskQueue: Array<Task> = [];\nvar timerQueue: Array<Task> = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrance.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nlet currentMockTime: number = 0;\nlet scheduledCallback:\n  | null\n  | ((\n      hasTimeRemaining: boolean,\n      initialTime: DOMHighResTimeStamp | number,\n    ) => boolean) = null;\nlet scheduledTimeout: (number => void) | null = null;\nlet timeoutTime: number = -1;\nlet yieldedValues: Array<mixed> | null = null;\nlet expectedNumberOfYields: number = -1;\nlet didStop: boolean = false;\nlet isFlushing: boolean = false;\nlet needsPaint: boolean = false;\nlet shouldYieldForPaint: boolean = false;\n\nvar disableYieldValue = false;\n\nfunction setDisableYieldValue(newValue: boolean) {\n  disableYieldValue = newValue;\n}\n\nfunction advanceTimers(currentTime: number) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime: number) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining: boolean, initialTime: number) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskErrored(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining: boolean, initialTime: number): boolean {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (currentTask !== null) {\n    if (\n      currentTask.expirationTime > currentTime &&\n      (!hasTimeRemaining || shouldYieldToHost())\n    ) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentPriorityLevel = currentTask.priorityLevel;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n        advanceTimers(currentTime);\n\n        if (shouldYieldForPaint) {\n          needsPaint = true;\n          return true;\n        } else {\n          // If `shouldYieldForPaint` is false, we keep flushing synchronously\n          // without yielding to the main thread. This is the behavior of the\n          // `toFlushAndYield` and `toFlushAndYieldThrough` testing helpers .\n        }\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority<T>(\n  priorityLevel: PriorityLevel,\n  eventHandler: () => T,\n): T {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next<T>(eventHandler: () => T): T {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback<T: (...Array<mixed>) => mixed>(callback: T): T {\n  var parentPriorityLevel = currentPriorityLevel;\n  // $FlowFixMe[incompatible-return]\n  // $FlowFixMe[missing-this-annot]\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(\n  priorityLevel: PriorityLevel,\n  callback: Callback,\n  options?: {delay: number},\n): Task {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask: Task = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_cancelCallback(task: Task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel(): PriorityLevel {\n  return currentPriorityLevel;\n}\n\nfunction requestHostCallback(callback: (boolean, number) => boolean) {\n  scheduledCallback = callback;\n}\n\nfunction requestHostTimeout(callback: number => void, ms: number) {\n  scheduledTimeout = callback;\n  timeoutTime = currentMockTime + ms;\n}\n\nfunction cancelHostTimeout(): void {\n  scheduledTimeout = null;\n  timeoutTime = -1;\n}\n\nfunction shouldYieldToHost(): boolean {\n  if (\n    (expectedNumberOfYields === 0 && yieldedValues === null) ||\n    (expectedNumberOfYields !== -1 &&\n      yieldedValues !== null &&\n      yieldedValues.length >= expectedNumberOfYields) ||\n    (shouldYieldForPaint && needsPaint)\n  ) {\n    // We yielded at least as many values as expected. Stop flushing.\n    didStop = true;\n    return true;\n  }\n  return false;\n}\n\nfunction getCurrentTime(): number {\n  return currentMockTime;\n}\n\nfunction forceFrameRate() {\n  // No-op\n}\n\nfunction reset() {\n  if (isFlushing) {\n    throw new Error('Cannot reset while already flushing work.');\n  }\n  currentMockTime = 0;\n  scheduledCallback = null;\n  scheduledTimeout = null;\n  timeoutTime = -1;\n  yieldedValues = null;\n  expectedNumberOfYields = -1;\n  didStop = false;\n  isFlushing = false;\n  needsPaint = false;\n}\n\n// Should only be used via an assertion helper that inspects the yielded values.\nfunction unstable_flushNumberOfYields(count: number): void {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    expectedNumberOfYields = count;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushUntilNextPaint(): false {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    shouldYieldForPaint = true;\n    needsPaint = false;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      shouldYieldForPaint = false;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n  return false;\n}\n\nfunction unstable_hasPendingWork(): boolean {\n  return scheduledCallback !== null;\n}\n\nfunction unstable_flushExpired() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    isFlushing = true;\n    try {\n      const hasMoreWork = scheduledCallback(false, currentMockTime);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      isFlushing = false;\n    }\n  }\n}\n\nfunction unstable_flushAllWithoutAsserting(): boolean {\n  // Returns false if no work was flushed.\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentMockTime);\n      } while (hasMoreWork);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n      return true;\n    } finally {\n      isFlushing = false;\n    }\n  } else {\n    return false;\n  }\n}\n\nfunction unstable_clearLog(): Array<mixed> {\n  if (yieldedValues === null) {\n    return [];\n  }\n  const values = yieldedValues;\n  yieldedValues = null;\n  return values;\n}\n\nfunction unstable_flushAll(): void {\n  if (yieldedValues !== null) {\n    throw new Error(\n      'Log is not empty. Assert on the log of yielded values before ' +\n        'flushing additional work.',\n    );\n  }\n  unstable_flushAllWithoutAsserting();\n  if (yieldedValues !== null) {\n    throw new Error(\n      'While flushing work, something yielded a value. Use an ' +\n        'assertion helper to assert on the log of yielded values, e.g. ' +\n        'expect(Scheduler).toFlushAndYield([...])',\n    );\n  }\n}\n\nfunction log(value: mixed): void {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any values yielding in the second pass.\n    return;\n  }\n  if (yieldedValues === null) {\n    yieldedValues = [value];\n  } else {\n    yieldedValues.push(value);\n  }\n}\n\nfunction unstable_advanceTime(ms: number) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog' || disableYieldValue) {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any time advancing in the second pass.\n    return;\n  }\n  currentMockTime += ms;\n  if (scheduledTimeout !== null && timeoutTime <= currentMockTime) {\n    scheduledTimeout(currentMockTime);\n    timeoutTime = -1;\n    scheduledTimeout = null;\n  }\n}\n\nfunction requestPaint() {\n  needsPaint = true;\n}\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  requestPaint as unstable_requestPaint,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n  unstable_flushAllWithoutAsserting,\n  unstable_flushNumberOfYields,\n  unstable_flushExpired,\n  unstable_clearLog,\n  unstable_flushUntilNextPaint,\n  unstable_hasPendingWork,\n  unstable_flushAll,\n  log,\n  unstable_advanceTime,\n  reset,\n  setDisableYieldValue as unstable_setDisableYieldValue,\n};\n\nexport const unstable_Profiling: {\n  startLoggingProfilingEvents(): void,\n  stopLoggingProfilingEvents(): ArrayBuffer | null,\n} | null = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n"],"names":["enableProfiling","push","heap","node","index","length","siftUp","peek","pop","first","last","siftDown","i","parentIndex","parent","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","currentMockTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","disableYieldValue","setDisableYieldValue","newValue","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","initialTime","cancelHostTimeout","previousPriorityLevel","workLoop","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","getCurrentTime","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_cancelCallback","unstable_getCurrentPriorityLevel","forceFrameRate","reset","Error","unstable_flushNumberOfYields","count","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_hasPendingWork","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearLog","values","unstable_flushAll","log","value","console","name","unstable_advanceTime","requestPaint","unstable_Profiling"],"mappings":"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"}